# Use bash with "fail fast"
set shell := ["bash", "-eu", "-o", "pipefail", "-c"]

# --------- Variables you can tweak ---------
# GitHub namespace (owner/repo) and full GHCR namespace.
OWNER     := env_var_or_default('OWNER', 'pirpedro')
REPO_NAME := env_var_or_default('REPO_NAME', 'features')
GHCR_NS   := "ghcr.io" / OWNER / REPO_NAME

# Auto-discover features from src/* (space-separated), portable across GNU/BSD userlands
FEATURES := `ls -1d features/src/*/ 2>/dev/null | sed 's#/$##' | xargs -n1 basename | sort | tr '\n' ' ' | sed 's/ $//'`
DEFAULT_FEATURE := "antidote"

# Workspace folder for real devcontainer runs
WF := "."

# --------- Help ---------
# Default help target showing common tasks and usage examples.
help:
	@echo "=== Devcontainer Features Justfile ==="
	@echo
	@echo "Available commands:"
	@echo "  just test [FEATURE] [-- flags...]         # run feature tests (default = all FEATURES)"
	@echo "  just test-debug [FEATURE] [-- flags...]   # same as 'test' but with verbose logs and no cleanup"
	@echo "  just info-all                             # show GHCR metadata for all discovered features"
	@echo "  just info [FEATURE] [TAG]                 # show GHCR metadata for a single feature (default tag=latest)"
	@echo "  just tag version=<X.Y.Z>                  # create and push git tag 'vX.Y.Z'"
	@echo "  just up                                   # start a real devcontainer from workspace"
	@echo "  just exec CMD='bash'                      # exec a command inside the real devcontainer"
	@echo "  just docker-enter-last                    # enter the most recent test container (sh)"
	@echo "  just ghcr-tags FEATURE=<name>             # list GHCR tags for a feature (requires 'oras')"
	@echo
	@echo "Examples:"
	@echo "  just test chezmoi                         # run tests for local feature 'chezmoi'"
	@echo "  just test-debug chezmoi -- --log-level trace"
	@echo "  just info chezmoi latest                  # show GHCR metadata for 'chezmoi:latest'"
	@echo "  just tag version=1.2.3                    # create and push git tag 'v1.2.3'"

# --------- Feature tests ---------
# Run tests for a feature (local or GHCR). Default = all FEATURES.
test feature=FEATURES *args:
	devcontainer features test \
		--features {{feature}} \
		--project-folder ./features \
		--skip-autogenerated \
		--skip-duplicated \
		{{args}}

# Run tests with debug mode enabled: verbose logs, trace level, no cleanup.
test-debug feature=FEATURES *args:
	DEBUG=1 devcontainer features test \
	      --features {{feature}} \
				--project-folder ./features \
	      --skip-autogenerated \
	      --log-level trace \
	      --skip-duplicated \
	      {{args}}


# --------- Info / inspection ---------
# Show remote GHCR metadata for all discovered features.
info-all:
	for f in {{FEATURES}}; do \
	  echo "==> ${f}"; \
	  devcontainer features info manifest "{{GHCR_NS}}/${f}" || true; \
	  echo; \
	done

# Show remote GHCR metadata for one feature (default tag = latest).
info feature=DEFAULT_FEATURE tag='latest':
	devcontainer features info manifest "{{GHCR_NS}}/{{feature}}:{{tag}}"

# --------- Release / Docs ---------
# Create and push a git tag with prefix 'v'.
tag version:
	git tag "v{{version}}"
	git push --tags
	echo "Tag v{{version}} pushed."

# --------- Real Dev Container ---------
# Bring up a real devcontainer from the current workspace.
up:
	devcontainer up --workspace-folder "${WF:-{{WF}}}"

# Exec command inside the real devcontainer. Defaults to bash, falls back to sh.
exec:
	devcontainer exec --workspace-folder "${WF:-{{WF}}}" ${CMD:-bash} || \
	devcontainer exec --workspace-folder "${WF:-{{WF}}}" sh




